generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  bitrixId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  lastName     String? @map("last_name")
  secondName   String? @map("second_name")
  workPosition String? @map("work_position")

  departmentIds String[] @default([])

  Department Department[]  @relation("UserDepartments")
  Tasks      Task[]
  WorkLog    ElapsedItem[]
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  bitrixId    String  @unique
  createdDate String?
  title       String?
  description String?

  groupId String

  Group   SonetGroup?   @relation(fields: [groupId], references: [bitrixId])
  userId  String?
  User    User?         @relation(fields: [userId], references: [bitrixId])
  WorkLog ElapsedItem[]
}

model ElapsedItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bitrixId    String   @unique
  createdDate DateTime

  userId Int
  taskId Int

  minutes String?

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

model Department {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bitrixId String  @unique
  name     String?
  sort     Int?
  parent   String?

  User User[] @relation("UserDepartments")
}

model SonetGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bitrixId String @unique
  Task     Task[]
}
